"""
This type stub file was generated by pyright.
"""

import trio_asyncio

from typing import Callable, Any, List

"""
This type stub file was generated by pyright.
"""
def connect(connection: str) -> TrioConnectionProxy:
    ...

def create_pool(*args, **kwargs):
    ...

class TrioTransactionProxy:
    def __init__(self, asyncpg_transaction) -> None:
        ...
    
    @trio_asyncio.aio_as_trio
    async def __aenter__(self, *args):
        ...
    
    @_shielded
    @trio_asyncio.aio_as_trio
    async def __aexit__(self, *args):
        ...    


class TrioCursorProxy:
    def __init__(self, asyncpg_cursor) -> None:
        ...
    
    @trio_asyncio.aio_as_trio
    async def fetch(self, *args, **kwargs):
        ...
    
    @trio_asyncio.aio_as_trio
    async def fetchrow(self, *args, **kwargs):
        ...
    
    @trio_asyncio.aio_as_trio
    async def forward(self, *args, **kwargs):
        ...
    


class TrioCursorFactoryProxy:
    def __init__(self, asyncpg_transaction_factory) -> None:
        ...
    
    def __await__(self):
        ...
    
    def __aiter__(self):
        ...
    
    @trio_asyncio.aio_as_trio
    async def __anext__(self):
        ...
    


class TrioStatementProxy:
    def __init__(self, asyncpg_statement) -> None:
        ...
    
    def cursor(self, *args, **kwargs):
        ...
    
    def __getattr__(self, attr):
        ...
    


class TrioConnectionProxy:
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def transaction(self, *args, **kwargs):
        ...
    
    async def prepare(self, *args, **kwargs):
        ...
    
    def __getattr__(self, attr):
        ...
    
    def cursor(self, *args, **kwargs):
        ...
    
    @_shielded
    @trio_asyncio.aio_as_trio
    async def close(self):
        ...
    
    async def __aenter__(self):
        ...
    
    async def __aexit__(self, *exc):
        ...

    async def add_listener(self, channel: str, callback: Callable[..., Any])-> None: ...

    async def remove_listener(self, channel: str, callback: Callable[..., Any])-> None: ...

    async def execute(self, query: str, *params: ...) -> None: ...
    async def executemany(self, query: str, params: List[Any]) -> None: ...
    async def fetch(self, query: str) -> List[Any]: ...


class TrioPoolAcquireContextProxy:
    def __init__(self, asyncpg_acquire_context) -> None:
        ...
    
    @trio_asyncio.aio_as_trio
    async def __aenter__(self, *args):
        ...
    
    @_shielded
    @trio_asyncio.aio_as_trio
    async def __aexit__(self, *args):
        ...
    


class TrioPoolProxy:
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def acquire(self):
        ...
    
    async def execute(self, statement: str, *args, timeout: float = ...):
        ...
    
    async def executemany(self, statement: str, args, *, timeout: float = ...):
        ...
    
    async def fetch(self, query, *args, timeout: float = ...):
        ...
    
    async def fetchval(self, query, *args, timeout: float = ...):
        ...
    
    async def fetchrow(self, query, *args, timeout: float = ...):
        ...
    
    @_shielded
    @trio_asyncio.aio_as_trio
    async def close(self):
        ...
    
    def terminate(self):
        ...
    
    async def __aenter__(self):
        ...
    
    async def __aexit__(self, *exc):
        ...
    


